#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <unistd.h>
#include <semaphore.h>
#include <sys/syscall.h>

#define gettid() ((pid_t)syscall(SYS_gettid)) //definer for getting Thread ID of current ID

/*
 * how to start:
 * gcc main.c -pthread -o main
 * ./main
 */

const int m = 10; //rows
const int n = 5;
const int k = 20; //books

int books[10][5][20];

sem_t wrt;

int mc =0, nc = 0;

void* addNoteAboutBook(){
    printf("Student #%d started working!\n", getpid());
    while (mc < m) {
        sem_wait(&wrt);
        for(int i = 0; i < k; i++)
         printf("Student %d: book #%d\n", gettid(), books[mc][nc][i]);
            nc++;
            if (nc == n) {
                nc = 0;
                mc++;
            }
        sem_post(&wrt);
    }
    printf("Student #%d ended working!\n", getpid());
    return 0;
}

int main() {
    //creating random books with random id's in [0, 10000)
    for(int i = 0; i < m; i++)
        for (int j = 0; j < n; ++j) {
            for (int l = 0; l < k; ++l) {
                books[i][j][l] = rand() % 10000;
            }
        }

printf("Enter number of students:\n");
int s;
scanf("%d", &s);
while (s < 1){
printf("Wrong number of students!( < 1)\nEnter number of students:\n");
scanf("%d", &s);
}

    pthread_t students[s];
    sem_init(&wrt, 0,1);
    for(int i = 0; i < s; i++){
        pthread_create(&students[i], NULL, addNoteAboutBook, NULL);
    }
    for(int i = 0; i < s; i++){
        pthread_join(students[i], NULL);
    }

    return 0;
}
